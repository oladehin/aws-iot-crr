AWSTemplateFormatVersion : '2010-09-09'
Description: "A combination of IoT Rules Engine, DynamoDB, Step Functions to migrate IoT Events from one region to a second region"
Transform: AWS::Serverless-2016-10-31

Parameters:

  ##################################
  # Lambda Input Parameters
  ##################################
  LambdaS3RegistrySourceCodeBucket:
    Type: "String"
    Description: "The source S3 location for lambda functions"
  RoutingFunctionS3Key:
    Type: "String"
    Default: "routing-registry-function-0.1-SNAPSHOT-lambda.jar"
    Description: "Determines whether a Registry Event should be forwarded 
                  to the other region. By default all events are forwarded in an active/passive manner"
  PersistFunctionS3Key:
    Type: "String"
    Default: "persist-event-function-0.1-SNAPSHOT-lambda.jar"
    Description: "Persists the underlying event into the global tables data store"

  ##################################
  # DynamoDB Input Parameters
  ##################################

  RegistryEventTableName:
    Type: "String"
    Default: "RegistryEvents"

  ##################################
  # IoT Rule Configuration Parameters
  ##################################

  IotRegistryEventsRuleName:
    Type: "String"
    Default: "RegistryCertificateWorkflow"
    Description: "IoT Registry Workflow"
  RegistryRoutingStateMachineName:
    Type: "String"
    Default: "RegistryPersistenceStateMachine"
    Description: "IoT Registry Replication Workflow"

Resources:

  ##################################
  # AWS IoT Resources
  ##################################

  IoTJitrStateMachineRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: !Ref IotRegistryEventsRuleName
      TopicRulePayload:
        Description: "AWS IoT Registry Events Workflow"
        AwsIotSqlVersion: "2016-03-23"
        RuleDisabled: false
        Sql: "SELECT * FROM '$aws/events/#' WHERE topic(3) = 'thing' OR topic(3) = 'thingGroup' OR topic(3) = 'thingType' OR topic(3) = 'thingTypeAssociation' OR topic(3) = 'thingGroupMembership' OR topic(3) = 'thingGroupHierarchy'"
        Actions:
          - StepFunctions:
              ExecutionNamePrefix: "IotRegistryEvent"
              RoleArn: !GetAtt 'IotRuleRegistryEventWorkflowRole.Arn'
              StateMachineName: !Ref RegistryRoutingStateMachineName
  IotRuleRegistryEventWorkflowRole:
   Type: AWS::IAM::Role
   Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - iot.amazonaws.com
            Action:
              - sts:AssumeRole
  IoTRoleRegistryPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: IotRegistryEventsRuleStepFunctions_Policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource: "*"
      Roles: [{ Ref: IotRuleRegistryEventWorkflowRole }]

  ##################################
  # AWS Lambda Functions for Registry Workflow
  ##################################

  PersistRegistryEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: 'com.ooladehin.awsiot.registry.main.PersistEventFunction::handleRequest'
      Runtime: 'java8'
      MemorySize: 512
      Timeout: 15
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource: "*"
      Environment:
        Variables:
          IOT_SOURCE_REGION: !Ref "AWS::Region"
          REGISTRY_EVENT_TABLENAME: !Ref RegistryEventTableName
      CodeUri:
        Bucket: !Ref LambdaS3RegistrySourceCodeBucket
        Key: !Ref PersistFunctionS3Key
  RoutingRegistryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: 'com.ooladehin.awsiot.registry.main.RoutingRegistryFunction::handleRequest'
      Runtime: 'java8'
      MemorySize: 512
      Timeout: 15
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource: "*"
      Environment:
        Variables:
          IOT_SOURCE_REGION: !Ref "AWS::Region"
          REGISTRY_EVENT_TABLENAME: !Ref RegistryEventTableName
      CodeUri:
        Bucket: !Ref LambdaS3RegistrySourceCodeBucket
        Key: !Ref RoutingFunctionS3Key

  ##################################
  # IoT Core Registry Replication Routing 
  # State Machine
  ##################################
  JustInTimeRegistrationStateMachine:
    Type: 'AWS::StepFunctions::StateMachine'

    Properties:
      StateMachineName: !Ref RegistryRoutingStateMachineName
      DefinitionString: !Sub |
        {
          "Comment":"Replicating Registry Events to Global Tables",
          "StartAt":"RoutingRegistryEventState",
          "States":{
              "RoutingRegistryEventState":{
                "Type":"Task",
                "Resource":"${RoutingRegistryFunction.Arn}",
                "Catch":[{
                      "ErrorEquals":[
                          "States.ALL"
                      ],
                      "ResultPath":"$.RegistryEventError",
                      "Next":"Fail"
                }],
                "ResultPath": "$.shouldReplicate",
                "Next":"PersistRegistryEventState"
              },
              "PersistRegistryEventState":{
                "Type":"Task",
                "Resource":"${PersistRegistryEventFunction.Arn}",
                "Catch":[{
                      "ErrorEquals":[
                          "States.ALL"
                      ],
                      "ResultPath":"$.PersistRegistryError",
                      "Next":"Fail"
                }],
                "End":true
              },
              "Fail":{
                "Type":"Fail"
              }
          }
        }
      RoleArn: !GetAtt 'RegistryReplicationStepFunctionsIamRole.Arn'

  RegistryReplicationStepFunctionsIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: !Sub 'states.${AWS::Region}.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: lambda
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 'lambda:InvokeFunction'
            Resource:
            - !GetAtt 'PersistRegistryEventFunction.Arn'
            - !GetAtt 'RoutingRegistryFunction.Arn'
 

  ##################################
  # Registry DynamoDB Database
  ##################################

  RegistryEventTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Ref RegistryEventTableName
      AttributeDefinitions:
      - AttributeName: "eventId"
        AttributeType: S
      KeySchema:
      - AttributeName: "eventId"
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 20
        WriteCapacityUnits: 20
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
