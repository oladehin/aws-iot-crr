AWSTemplateFormatVersion : '2010-09-09'
Description: Sample template to test JITR

Parameters:
  LambdaS3RegistrySourceCodeBucket:
    Type: "String"
    Default: "aws-iot-registry-workflow"
    Description: "The destination S3 location for lambda functions"
  RoutingFunctionS3Key:
    Type: "String"
    Default: "activate-certificate-function-0.1-SNAPSHOT-lambda.jar"
  PersistFunctionS3Key:
    Type: "String"
    Default: "attach-certificate-function-0.1-SNAPSHOT-lambda.jar"
    Description: "Thing Type Replication Function Location on S3"
  IoTGlobalPolicyName:
    Type: "String"
    Default: "Cross-region-iot-policy"
    Description: "IoT Global Policy Name"
  IoTStateMachineRuleName:
    Type: "String"
    Default: "RegistryCertificateWorkflow"
    Description: "IoT Registry Workflow"
  RegistryStateMachineName:
    Type: "String"
    Default: "JitrCertificateWorkflow"
    Description: "IoT JITR Certificate Workflow"
Resources:

  ##################################
  # AWS IoT Resources
  ##################################

  IoTJitrStateMachineRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: !Ref IoTStateMachineRuleName
      TopicRulePayload:
        Description: "AWS IoT JITR Workflow"
        AwsIotSqlVersion: "2016-03-23"
        RuleDisabled: false
        Sql: "SELECT * FROM '$aws/events/#' WHERE topic(3) = 'thing' OR topic(3) = 'thingGroup' OR topic(3) = 'thingType' OR topic(3) = 'thingTypeAssociation' OR topic(3) = 'thingGroupMembership' OR topic(3) = 'thingGroupHierarchy'"
        Actions:
          - StepFunctions:
              ExecutionNamePrefix: "RegistryRegistration"
              RoleArn: !GetAtt 'IotRuleRegistryWorkflowRole.Arn'
              StateMachineName: !Ref RegistryStateMachineName
  IotRuleRegistryWorkflowRole:
   Type: AWS::IAM::Role
   Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - iot.amazonaws.com
            Action:
              - sts:AssumeRole
  IoTRoleRegistryPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: IotRegistryRuleStepFunctions_Policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource: "*"
      Roles: [{ Ref: IotRuleRegistryWorkflowRole }]

  ##################################
  # AWS Lambda Functions for Jitr
  ##################################

    RoutingFunctionS3Key:
      Type: "String"
      Default: "activate-certificate-function-0.1-SNAPSHOT-lambda.jar"
    PersistFunctionS3Key:
      Type: "String"
      Default: "attach-certificate-function-0.1-SNAPSHOT-lambda.jar"
      Description: "Thing Type Replication Function Location on S3"

  ActivateCertificateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: 'com.ooladehin.awsiot.certregistration.main.ActivateCertificateFunction::handleRequest'
      Runtime: 'java8'
      MemorySize: 1024
      Timeout: 15
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - iot:*
              Resource: "*"
      Environment:
        Variables:
          IOT_SOURCE_REGION: !Ref "AWS::Region"
      CodeUri:
        Bucket: !Ref LambdaS3JitrSourceCodeBucket
        Key: !Ref ActivateCertificateFunctionS3Key
  AttachCertificateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: 'com.ooladehin.awsiot.certregistration.main.AttachCertificateFunction::handleRequest'
      Runtime: 'java8'
      MemorySize: 1024
      Timeout: 15
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - iot:*
              Resource: "*"
      Environment:
        Variables:
          IOT_SOURCE_REGION: !Ref "AWS::Region"
      CodeUri:
        Bucket: !Ref LambdaS3JitrSourceCodeBucket
        Key: !Ref AttachCertificateFunctionS3Key

  ##################################
  # =Just In Time Registration State Machine
  ##################################
  JustInTimeRegistrationStateMachine:
    Type: 'AWS::StepFunctions::StateMachine'

    Properties:
      StateMachineName: !Ref JitrStateMachineName
      DefinitionString: !Sub |
        {
           "Comment":"Registering an IoT Device Using Step Functions",
           "StartAt":"ParseCertificate",
           "States":{
              "ParseCertificate":{
                 "Type":"Task",
                 "Resource":"${ParseCertificateFunction.Arn}",
                 "Catch":[{
                       "ErrorEquals":[
                          "States.ALL"
                       ],
                       "ResultPath":"$.CertificatParsingError",
                       "Next":"Fail"
                 }],
                 "Next":"ActivateCertificate"
              },
              "ActivateCertificate":{
                 "Type":"Task",
                 "Resource":"${ActivateCertificateFunction.Arn}",
                 "Catch":[{
                       "ErrorEquals":[
                          "States.ALL"
                       ],
                       "ResultPath":"$.ActivatCertificateError",
                       "Next":"Fail"
                 }],
                 "Next":"AttachIotPolicy"
              },
              "AttachIotPolicy":{
                 "Type":"Task",
                 "Resource":"${AttachPolicyFunction.Arn}",
                 "Catch":[{
                       "ErrorEquals":[
                          "States.ALL"
                       ],
                       "ResultPath":"$.AttachPolicyError",
                       "Next":"Fail"
                  }],
                 "Next":"CreateThing"
              },
              "CreateThing":{
                 "Type":"Task",
                 "Resource":"${CreateThingFunction.Arn}",
                 "Catch":[{
                       "ErrorEquals":[
                          "States.ALL"
                       ],
                       "ResultPath":"$.CreateThingError",
                       "Next":"Fail"
                  }],
                 "Next":"AttachPrincipal"
              },
               "AttachPrincipal":{
                 "Type":"Task",
                 "Resource":"${AttachCertificateFunction.Arn}",
                 "Catch":[{
                       "ErrorEquals":[
                          "States.ALL"
                       ],
                       "ResultPath":"$.AttachPrincipalError",
                       "Next":"Fail"
                  }],
                 "Next":"ReplicateCertificate"
              },"ReplicateCertificate":{
                 "Type":"Task",
                 "Resource":"${StoreCertificateFunction.Arn}",
                 "Catch":[{
                       "ErrorEquals":[
                          "States.ALL"
                       ],
                       "ResultPath":"$.ReplicateCertificateError",
                       "Next":"Fail"
                  }],
                 "End":true
              },
              "Fail":{
                 "Type":"Fail"
              }
           }
        }
      RoleArn: !GetAtt 'JustInTimeStepFunctionsIamRole.Arn'

  # Step Functions IAM role
  JustInTimeStepFunctionsIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: !Sub 'states.${AWS::Region}.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: lambda
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 'lambda:InvokeFunction'
            Resource:
            - !GetAtt 'ParseCertificateFunction.Arn'
            - !GetAtt 'ActivateCertificateFunction.Arn'
            - !GetAtt 'AttachPolicyFunction.Arn'
            - !GetAtt 'CreateThingFunction.Arn'
            - !GetAtt 'StoreCertificateFunction.Arn'
            - !GetAtt 'AttachCertificateFunction.Arn'
